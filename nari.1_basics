.TH Nari 1

.ce 1
.SH -=-=-=-=-=-=-=-=-=- NARI DOCUMENTATION: BASICS -=-=-=-=-=-=-=-=-=-

.SH ABOUT
.PP
Nari is a stack-based statically-typed programming language.
This means that all operations in the
nari language that involve one or more parameters are executed in a stack. For
example, in order to add two numbers you have to push each one of them to the
stack and then execute the '+' function (addition), that will pop those values
from the stack and then push the result.

A nari script is a sequence of valid keywords and/or literals separated by whitespace.

.SH VARIABLES AND TYPES
.PP
Variables in nari are statically typed and consist of five types of variables,
each identified by its own sigil:
    - Number variables, identified by the sigil '.'.
    - String variables, identified by the sigil '$'.
    - Array variables, identified by two times the sigil of its type (for example, '..' for numeric arrays).

.PP
Variable names can only consist of A-z letters, numbers and must be preceded by one of the aforementioned sigils.
Variable names are NOT case-sensitive. Valid variable names are, for example:
    - .myNumber
    - $myText123
    - ..foo3
    - $$var
.br
While invalid variable name examples are:
    - myNumber
    - $My-Text
    - .$foo
    - .my number
    - etc.

.PP
Every object pushed to the stack has its own type and can only be stored in
variables of said type. Also, each operation in the language requires a particular
type of for each of its parameters, and failing to provide elements of the correct
type will result in an exception (for example, the aforementioned '+' operation
requires two parameters of numeric type to be available on top of the stack).

.SH THE STACK
.PP
Being a stack-based language, nari has a stack that's implicitly accessed by most
operations. This stack is ubiquitous, unique and typed. It's ubiquitous for it's
accessed from every possible scope of the language, and all functions and operations
can (and most probably will) pop and push values from and to it. It's unique for
there is only one stack of this kind in the language and no other structure can
replace it. It's typed for every value pushed to the stack has, as it's been
mentioned, a well-defined type. Again, a function that takes, say, two string
values will not be happy if two numeric values are found when popping from the
array and, thus, an exeption will be risen.

The stack works in the following way:
    - The programmer can push values to the stack.
    - Functions pop values from the stack and, possibly, push a new value to the stack.
    - Whan a function takes a parameter, it will be taken from the top of the stack.
    - Every function that interacts with a value from the stack pops it. For example, printing a value or storing it in a variable pops it.

If I run the nari code '1 2 +', first the '1' will be pushed to the stack, and my stack will look like this:
    [top   ]
    1
    [bottom]

Then, the '2' will be pushed to the stack, and the stack will look like this:
    [top   ]
    2
    1
    [bottom]

Then, the '+' function will be executed. Both values will be popped from the stack and added.
While the function is being executed, the stack will look like this:
    [top   ]
    [bottom]

Then, the resulting value of the function will be pushed to the stack and it will end up looking like this:
    [top   ]
    3
    [bottom]

.SH SIMPLE EXAMPLES
.PP
A few simple examples of the use of the language will be listed in this section, along with
appropriate explanations of what they do and how. Programs will be surounded by ' ' (quotes),
but when typing this programs one should take care not to include them.

.PP
.B '"Hello World!" print'
    The text value "Hello World!" is pushed to the stack. Then the 'print' operation is
executed. It pops the top of the stack for a value and the prints it to the screen.
The stack, once the execution ends, it's empty.

.B '10 6 - print'
    10 is pushed to the stack. Then 6, and then 6 is subtracted from 10. The resulting
value is then printed to the screen.

.B 'accept toNumber 10 * print'
    The user is prompted to enter some input. This input is then casted to a numeric value
and then multiplied by 10. Then, the value is printed to the screen.

.B '78 toVar(.foo) "The number is: " print var(.foo) print"'
    78 is pushed to the stack. The numeric value is then stored in the variable '.foo'. The string value
"The number is: " is pushed to the stack, and then popped and 'print'ed to the screen.
Then the value stored in var(.foo) (our 78) is pushed to the stack, and then popped and printed, thus
printing 'The number is: 78' to the screen.

.SH AUTHOR
This document was written by Martín del Río.

.SH REPORTING BUGS
Report any bugs to <https://github.com/lartu/nari>.

.SH COPYRIGHT
Copyright © 2017 - 2019, Martín del Río. Nari may be copied only under the terms of the GNU General Public License 3.0, which may be found in the nari repository.
.br
This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law.
